// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/psf.proto

#include "proto/psf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PSFProto {
constexpr PSFSaveFile_PSFKeyValue::PSFSaveFile_PSFKeyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stringval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , intval_(0)
  , doubleval_(0)
  , floatval_(0){}
struct PSFSaveFile_PSFKeyValueDefaultTypeInternal {
  constexpr PSFSaveFile_PSFKeyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PSFSaveFile_PSFKeyValueDefaultTypeInternal() {}
  union {
    PSFSaveFile_PSFKeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PSFSaveFile_PSFKeyValueDefaultTypeInternal _PSFSaveFile_PSFKeyValue_default_instance_;
constexpr PSFSaveFile::PSFSaveFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gamename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct PSFSaveFileDefaultTypeInternal {
  constexpr PSFSaveFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PSFSaveFileDefaultTypeInternal() {}
  union {
    PSFSaveFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PSFSaveFileDefaultTypeInternal _PSFSaveFile_default_instance_;
}  // namespace PSFProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fpsf_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fpsf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fpsf_2eproto = nullptr;

const uint32_t TableStruct_proto_2fpsf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, type_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, intval_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, stringval_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, floatval_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile_PSFKeyValue, doubleval_),
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile, header_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile, version_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile, gamename_),
  PROTOBUF_FIELD_OFFSET(::PSFProto::PSFSaveFile, values_),
  0,
  2,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::PSFProto::PSFSaveFile_PSFKeyValue)},
  { 16, 26, -1, sizeof(::PSFProto::PSFSaveFile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PSFProto::_PSFSaveFile_PSFKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PSFProto::_PSFSaveFile_default_instance_),
};

const char descriptor_table_protodef_proto_2fpsf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017proto/psf.proto\022\010PSFProto\"\273\002\n\013PSFSaveF"
  "ile\022\016\n\006header\030\001 \002(\t\022\017\n\007version\030\002 \002(\005\022\020\n\010"
  "gameName\030\003 \002(\t\0221\n\006values\030\004 \003(\0132!.PSFProt"
  "o.PSFSaveFile.PSFKeyValue\032\207\001\n\013PSFKeyValu"
  "e\0220\n\004type\030\001 \002(\0162\".PSFProto.PSFSaveFile.P"
  "SFValueType\022\016\n\006intVal\030\002 \001(\005\022\021\n\tstringVal"
  "\030\003 \001(\t\022\020\n\010floatVal\030\004 \001(\002\022\021\n\tdoubleVal\030\005 "
  "\001(\001\"<\n\014PSFValueType\022\t\n\005Int32\020\000\022\n\n\006String"
  "\020\001\022\t\n\005Float\020\002\022\n\n\006Double\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fpsf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fpsf_2eproto = {
  false, false, 345, descriptor_table_protodef_proto_2fpsf_2eproto, "proto/psf.proto", 
  &descriptor_table_proto_2fpsf_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2fpsf_2eproto::offsets,
  file_level_metadata_proto_2fpsf_2eproto, file_level_enum_descriptors_proto_2fpsf_2eproto, file_level_service_descriptors_proto_2fpsf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fpsf_2eproto_getter() {
  return &descriptor_table_proto_2fpsf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fpsf_2eproto(&descriptor_table_proto_2fpsf_2eproto);
namespace PSFProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PSFSaveFile_PSFValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fpsf_2eproto);
  return file_level_enum_descriptors_proto_2fpsf_2eproto[0];
}
bool PSFSaveFile_PSFValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PSFSaveFile_PSFValueType PSFSaveFile::Int32;
constexpr PSFSaveFile_PSFValueType PSFSaveFile::String;
constexpr PSFSaveFile_PSFValueType PSFSaveFile::Float;
constexpr PSFSaveFile_PSFValueType PSFSaveFile::Double;
constexpr PSFSaveFile_PSFValueType PSFSaveFile::PSFValueType_MIN;
constexpr PSFSaveFile_PSFValueType PSFSaveFile::PSFValueType_MAX;
constexpr int PSFSaveFile::PSFValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PSFSaveFile_PSFKeyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<PSFSaveFile_PSFKeyValue>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_intval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stringval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_floatval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_doubleval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PSFSaveFile_PSFKeyValue::PSFSaveFile_PSFKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PSFProto.PSFSaveFile.PSFKeyValue)
}
PSFSaveFile_PSFKeyValue::PSFSaveFile_PSFKeyValue(const PSFSaveFile_PSFKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stringval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringval()) {
    stringval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stringval(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&floatval_) -
    reinterpret_cast<char*>(&type_)) + sizeof(floatval_));
  // @@protoc_insertion_point(copy_constructor:PSFProto.PSFSaveFile.PSFKeyValue)
}

inline void PSFSaveFile_PSFKeyValue::SharedCtor() {
stringval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stringval_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&floatval_) -
    reinterpret_cast<char*>(&type_)) + sizeof(floatval_));
}

PSFSaveFile_PSFKeyValue::~PSFSaveFile_PSFKeyValue() {
  // @@protoc_insertion_point(destructor:PSFProto.PSFSaveFile.PSFKeyValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PSFSaveFile_PSFKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stringval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PSFSaveFile_PSFKeyValue::ArenaDtor(void* object) {
  PSFSaveFile_PSFKeyValue* _this = reinterpret_cast< PSFSaveFile_PSFKeyValue* >(object);
  (void)_this;
}
void PSFSaveFile_PSFKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PSFSaveFile_PSFKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PSFSaveFile_PSFKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:PSFProto.PSFSaveFile.PSFKeyValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stringval_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&floatval_) -
        reinterpret_cast<char*>(&type_)) + sizeof(floatval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSFSaveFile_PSFKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PSFProto.PSFSaveFile.PSFValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PSFProto::PSFSaveFile_PSFValueType_IsValid(val))) {
            _internal_set_type(static_cast<::PSFProto::PSFSaveFile_PSFValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 intVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_intval(&has_bits);
          intval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string stringVal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stringval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PSFProto.PSFSaveFile.PSFKeyValue.stringVal");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float floatVal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_floatval(&has_bits);
          floatval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double doubleVal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_doubleval(&has_bits);
          doubleval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PSFSaveFile_PSFKeyValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSFProto.PSFSaveFile.PSFKeyValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PSFProto.PSFSaveFile.PSFValueType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 intVal = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_intval(), target);
  }

  // optional string stringVal = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringval().data(), static_cast<int>(this->_internal_stringval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PSFProto.PSFSaveFile.PSFKeyValue.stringVal");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stringval(), target);
  }

  // optional float floatVal = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_floatval(), target);
  }

  // optional double doubleVal = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_doubleval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSFProto.PSFSaveFile.PSFKeyValue)
  return target;
}

size_t PSFSaveFile_PSFKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSFProto.PSFSaveFile.PSFKeyValue)
  size_t total_size = 0;

  // required .PSFProto.PSFSaveFile.PSFValueType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string stringVal = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stringval());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional int32 intVal = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_intval());
    }

    // optional double doubleVal = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional float floatVal = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSFSaveFile_PSFKeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PSFSaveFile_PSFKeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSFSaveFile_PSFKeyValue::GetClassData() const { return &_class_data_; }

void PSFSaveFile_PSFKeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PSFSaveFile_PSFKeyValue *>(to)->MergeFrom(
      static_cast<const PSFSaveFile_PSFKeyValue &>(from));
}


void PSFSaveFile_PSFKeyValue::MergeFrom(const PSFSaveFile_PSFKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSFProto.PSFSaveFile.PSFKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringval(from._internal_stringval());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      intval_ = from.intval_;
    }
    if (cached_has_bits & 0x00000008u) {
      doubleval_ = from.doubleval_;
    }
    if (cached_has_bits & 0x00000010u) {
      floatval_ = from.floatval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSFSaveFile_PSFKeyValue::CopyFrom(const PSFSaveFile_PSFKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSFProto.PSFSaveFile.PSFKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSFSaveFile_PSFKeyValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PSFSaveFile_PSFKeyValue::InternalSwap(PSFSaveFile_PSFKeyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stringval_, lhs_arena,
      &other->stringval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PSFSaveFile_PSFKeyValue, floatval_)
      + sizeof(PSFSaveFile_PSFKeyValue::floatval_)
      - PROTOBUF_FIELD_OFFSET(PSFSaveFile_PSFKeyValue, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PSFSaveFile_PSFKeyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fpsf_2eproto_getter, &descriptor_table_proto_2fpsf_2eproto_once,
      file_level_metadata_proto_2fpsf_2eproto[0]);
}

// ===================================================================

class PSFSaveFile::_Internal {
 public:
  using HasBits = decltype(std::declval<PSFSaveFile>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gamename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PSFSaveFile::PSFSaveFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PSFProto.PSFSaveFile)
}
PSFSaveFile::PSFSaveFile(const PSFSaveFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_header()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArenaForAllocation());
  }
  gamename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gamename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gamename()) {
    gamename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamename(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:PSFProto.PSFSaveFile)
}

inline void PSFSaveFile::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gamename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gamename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0;
}

PSFSaveFile::~PSFSaveFile() {
  // @@protoc_insertion_point(destructor:PSFProto.PSFSaveFile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PSFSaveFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gamename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PSFSaveFile::ArenaDtor(void* object) {
  PSFSaveFile* _this = reinterpret_cast< PSFSaveFile* >(object);
  (void)_this;
}
void PSFSaveFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PSFSaveFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PSFSaveFile::Clear() {
// @@protoc_insertion_point(message_clear_start:PSFProto.PSFSaveFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      gamename_.ClearNonDefaultToEmpty();
    }
  }
  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSFSaveFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PSFProto.PSFSaveFile.header");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string gameName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gamename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PSFProto.PSFSaveFile.gameName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PSFProto.PSFSaveFile.PSFKeyValue values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PSFSaveFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PSFProto.PSFSaveFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_header().data(), static_cast<int>(this->_internal_header().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PSFProto.PSFSaveFile.header");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_header(), target);
  }

  // required int32 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // required string gameName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamename().data(), static_cast<int>(this->_internal_gamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PSFProto.PSFSaveFile.gameName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gamename(), target);
  }

  // repeated .PSFProto.PSFSaveFile.PSFKeyValue values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PSFProto.PSFSaveFile)
  return target;
}

size_t PSFSaveFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PSFProto.PSFSaveFile)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required string header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());
  }

  if (_internal_has_gamename()) {
    // required string gameName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());
  }

  if (_internal_has_version()) {
    // required int32 version = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return total_size;
}
size_t PSFSaveFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PSFProto.PSFSaveFile)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_header());

    // required string gameName = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamename());

    // required int32 version = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PSFProto.PSFSaveFile.PSFKeyValue values = 4;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSFSaveFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PSFSaveFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSFSaveFile::GetClassData() const { return &_class_data_; }

void PSFSaveFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PSFSaveFile *>(to)->MergeFrom(
      static_cast<const PSFSaveFile &>(from));
}


void PSFSaveFile::MergeFrom(const PSFSaveFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PSFProto.PSFSaveFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_gamename(from._internal_gamename());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSFSaveFile::CopyFrom(const PSFSaveFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PSFProto.PSFSaveFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSFSaveFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(values_))
    return false;
  return true;
}

void PSFSaveFile::InternalSwap(PSFSaveFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_, lhs_arena,
      &other->header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gamename_, lhs_arena,
      &other->gamename_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSFSaveFile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fpsf_2eproto_getter, &descriptor_table_proto_2fpsf_2eproto_once,
      file_level_metadata_proto_2fpsf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PSFProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PSFProto::PSFSaveFile_PSFKeyValue* Arena::CreateMaybeMessage< ::PSFProto::PSFSaveFile_PSFKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PSFProto::PSFSaveFile_PSFKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::PSFProto::PSFSaveFile* Arena::CreateMaybeMessage< ::PSFProto::PSFSaveFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PSFProto::PSFSaveFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
